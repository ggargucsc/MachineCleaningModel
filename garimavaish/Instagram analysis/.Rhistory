SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_ts) >= '2017-12-11'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_dates <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
project <- "bf-data-sci"
ga_dates <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
GROUP BY DATE(stats_date), external_object_id),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-11'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_dates <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
View(ga_dates)
unique(ga_dates$stats_dt)
rm(ga_dates)
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(total_eng = sum(engagement),
total_imp = sum(impressions),
total_reach = sum(reach),
total_saved = sum(saved))
library(dplyr)
library(ggplot2)
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(total_eng = sum(engagement),
total_imp = sum(impressions),
total_reach = sum(reach),
total_saved = sum(saved))
View(ga_summary)
View(ga_stats)
sapply(ga_stats, sum(is.na(x)))
sapply(ga_stats, function(x) sum(is.na(x)))
View(ga_stats)
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(total_eng = sum(engagement),
total_imp = sum(impressions),
total_reach = sum(reach),
total_saved = sum(saved))
str(ga_stats)
sapply(ga_stats, function(x) sum(is.na(x)))
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(total_eng = sum(as.numeric(engagement)),
total_imp = sum(as.numeric(impressions)),
total_reach = sum(reach),
total_saved = sum(saved))
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(total_eng = sum(as.numeric(engagement)),
total_imp = sum(as.numeric(impressions)),
total_reach = sum(as.numeric(reach)),
total_saved = sum(as.numeric(saved)))
library(reshape2)
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line()
options(scipen=999)
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line() + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day")
my_theme = theme(axis.line = element_line(size=1, colour = "black"),
panel.grid.major = element_line(colour = "#d3d3d3"), panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank()) +
theme(plot.title = element_text(size = 15, family = "Tahoma", face = "bold"),
text=element_text(family="Tahoma", face = "bold"),
axis.text.x=element_text(colour="black", size = 15),
axis.text.y=element_text(colour="black", size = 15))
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line() + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(linetype = variable, color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(aes(label=variable), position = position_stack(vjust = 0.5), size = 3.5, fontface = "bold" )
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(aes(x= "2017-12-15", label=variable), position = position_stack(vjust = 0.5), size = 3.5, fontface = "bold" )
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(aes(x= as.Date("2017-12-15"), label=variable), position = position_stack(vjust = 0.5), size = 3.5, fontface = "bold" )
View(ga_summary)
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day")
?geom_text
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = position_stack(vjust = 0.5), size = 3.5, fontface = "bold")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = position_stack(vjust = 0.1), size = 3.5, fontface = "bold")
?geom_text
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = "identity", size = 3.5, fontface = "bold")
?geom_text
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = "identity", nudge_y = 0.1, size = 3.5, fontface = "bold")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), nudge_y = 0.1, size = 3.5, fontface = "bold")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), nudge_y = 0.5, size = 3.5, fontface = "bold")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), nudge_y = 0.8, size = 3.5, fontface = "bold")
?geom_text
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = "identity", size = 3.5, fontface = "bold")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = "identity", size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
accounts_info_query =
"SELECT
a.external_id,
published,
b.display_name
FROM `prod.platform_data_api_post` a
JOIN `prod.platform_data_api_account` b
ON a.account_id = b.id
WHERE a.platform_id = 1 and b.platform_id = 1"
accounts_info = query_exec(accounts_info_query, project = project, use_legacy_sql = FALSE)
View(accounts_info)
my_theme = theme(axis.line = element_line(size=1, colour = "black"),
panel.grid.major = element_line(colour = "#d3d3d3"), panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank()) +
theme(plot.title = element_text(size = 15, family = "Tahoma", face = "bold"),
text=element_text(family="Tahoma", face = "bold"),
axis.text.x=element_text(colour="black", size = 15),
axis.text.y=element_text(colour="black", size = 15)) +
theme(legend.position="top") + theme(legend.title = element_blank())
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), position = "identity", size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = 1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = 2, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -2, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
# plot that shows total impressions, reach & engagement
# a two fold increase in impressions only slightly increased the engagement
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
GROUP BY DATE(stats_date), external_object_id
WHERE DATE(stats_date) >= '2017-12-11'
and DATE(stats_date) <= '2017-12-18'),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-11'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
sapply(ga_stats, function(x) sum(is.na(x)))
# get aggregated stats
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
# plot that shows total impressions, reach & engagement
# a two fold increase in impressions only slightly increased the engagement
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
GROUP BY DATE(stats_date), external_object_id
WHERE DATE(stats_date) >= '2017-12-05'
and DATE(stats_date) <= '2017-12-18'),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-05'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
sapply(ga_stats, function(x) sum(is.na(x)))
# get aggregated stats
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
# plot that shows total impressions, reach & engagement
# a two fold increase in impressions only slightly increased the engagement
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
View(ga_stats)
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
GROUP BY DATE(stats_date), external_object_id
WHERE DATE(stats_date) >= '2017-12-05'
and DATE(stats_date) <= '2017-12-18'),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-05'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
GROUP BY DATE(stats_date), external_object_id
WHERE DATE(stats_date) >= '2017-12-05'
and DATE(stats_date) <= '2017-12-18'),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-05'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
ga_imp_metrics <-
"WITH latest_ts_ga AS (
SELECT
external_object_id,
MAX(stats_ts) as latest_ts,
DATE(stats_date) as stats_date
FROM prod.distributed_stats_storage_instagram_post
WHERE DATE(stats_date) >= '2017-12-05'
and DATE(stats_date) <= '2017-12-18'
GROUP BY DATE(stats_date), external_object_id
),
latest_week_metrics_ga AS (
SELECT
latest_ts.external_object_id,
post.engagement,
post.saved,
post.impressions,
post.reach,
post.video_views,
latest_ts.stats_date as stats_dt
FROM latest_ts_ga as latest_ts
LEFT JOIN prod.distributed_stats_storage_instagram_post as post
ON latest_ts.external_object_id = post.external_object_id
AND latest_ts.latest_ts = post.stats_ts
WHERE DATE(post.stats_date) >= '2017-12-05'
and DATE(post.stats_date) <= '2017-12-18')
SELECT * FROM latest_week_metrics_ga"
ga_stats <- query_exec(ga_imp_metrics, project = project, use_legacy_sql = FALSE)
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
# plot that shows total impressions, reach & engagement
# a two fold increase in impressions only slightly increased the engagement
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
ga_summary = ga_stats %>% group_by(stats_dt) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
ga_summary = ga_summary[!duplicated(ga_summary),]
ga_summary = melt(ga_summary, id.vars = c("stats_dt"))
# plot that shows total impressions, reach & engagement
# a two fold increase in impressions but only slight increase in engagement
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics") + geom_vline()
ggplot(ga_summary, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
View(ga_summary)
View(ga_stats)
ga_stats %>% group_by(external_object_id, stats_dt) %>% summarise(count=n()) %>% filter(count>1)
ga_records = ga_stats %>% group_by(external_object_id, stats_dt) %>% summarise(count=n()) %>% filter(count>1)
ga_records = ga_stats %>% group_by(external_object_id, stats_dt) %>% summarise(count=n())
View(ga_records)
posts_with_accounts = merge(ga_stats, accounts_info, by.x=c("external_id"), by.y=c("external_object_id"))
posts_with_accounts = merge(ga_stats, accounts_info, by.y=c("external_id"), by.x=c("external_object_id"))
View(posts_with_accounts)
View(posts_with_accounts)
posts_with_accounts_tasty = posts_with_accounts %>% group_by(stats_dt, display_name) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved))) %>% filter(display_name == "Tasty")
View(posts_with_accounts_tasty)
posts_tasty = posts_with_accounts %>% group_by(stats_dt, display_name) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved))) %>% filter(display_name == "Tasty")
posts_summary = posts_with_accounts %>% group_by(stats_dt, display_name) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved)))
posts_summary = as.data.frame(posts_with_accounts %>% group_by(stats_dt, display_name) %>% summarise(Total_engagement = sum(as.numeric(engagement)),
Total_impressions = sum(as.numeric(impressions)),
Total_reach = sum(as.numeric(reach)),
Total_saved = sum(as.numeric(saved))))
posts_tasty = as.data.frame(posts_summary %>% filter(display_name == "Tasty"))
accounts_info_query =
"SELECT
a.external_id,
published,
b.display_name
c.name
FROM `prod.platform_data_api_post` a
JOIN `prod.platform_data_api_account` b
ON a.account_id = b.id
JOIN `prod.platform_data_api_post_type` c
ON a.account_id = c.id
WHERE a.platform_id = 1 and b.platform_id = 1"
accounts_info = query_exec(accounts_info_query, project = project, use_legacy_sql = FALSE)
accounts_info_query =
"SELECT
a.external_id,
published,
b.display_name,
c.name
FROM `prod.platform_data_api_post` a
JOIN `prod.platform_data_api_account` b
ON a.account_id = b.id
JOIN `prod.platform_data_api_post_type` c
ON a.account_id = c.id
WHERE a.platform_id = 1 and b.platform_id = 1"
accounts_info = query_exec(accounts_info_query, project = project, use_legacy_sql = FALSE)
View(ga_stats)
accounts_info_query =
"SELECT
a.external_id,
published,
b.display_name,
c.name
FROM `prod.platform_data_api_post` a
JOIN `prod.platform_data_api_account` b
ON a.account_id = b.id
JOIN `prod.platform_data_api_post_type` c
ON a.post_type_id = c.id
WHERE a.platform_id = 1 and b.platform_id = 1"
accounts_info = query_exec(accounts_info_query, project = project, use_legacy_sql = FALSE)
View(accounts_info)
unique(accounts_info[accounts_info$name,])
unique(accounts_info$name)
posts_with_accounts = merge(ga_stats, accounts_info, by.y=c("external_id"), by.x=c("external_object_id"), all.y=TRUE)
View(posts_with_accounts)
posts_with_accounts[posts_with_accounts$name=="photo", ]
posts_tasty = as.data.frame(posts_summary %>% filter(display_name == "Tasty"))
ggplot(posts_tasty, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
posts_tasty = melt(posts_tasty, id.vars = c("stats_dt"))
ggplot(posts_tasty, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
View(posts_tasty)
posts_tasty = as.data.frame(posts_summary %>% filter(display_name == "Tasty"))
posts_tasty = melt(posts_tasty, id.vars = c("stats_dt", "display_name"))
ggplot(posts_tasty, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=ga_summary[ga_summary$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
View(posts_tasty)
ggplot(posts_tasty, aes(x=stats_dt, y=value, color=variable)) + geom_line(size=1, aes(color=variable)) + my_theme +
scale_x_date(date_labels="%b %d",date_breaks  ="1 day") +
geom_text(data=posts_tasty[posts_tasty$stats_dt == as.Date("2017-12-15"),], aes(label= variable), vjust = -1, size = 3.5, fontface = "bold") +
xlab("Stats date") + ylab("Metrics")
View(posts_with_accounts)
View(posts_tasty)
posts_with_accounts = merge(ga_stats, accounts_info, by.y=c("external_id"), by.x=c("external_object_id"), all.y=TRUE)
View(posts_with_accounts)
View(posts_tasty)
as.Date("2017-12-15") - 1
as.Date("2017-12-15") - 2
as.Date("2017-12-15") - 3
posts_tasty = as.data.frame(posts_summary %>% filter(display_name == "Tasty"))
View(posts_tasty)
18816979
- 18342644
18816979- 18342644
531643697 - 519669139
1297725933 - 1287578689
?mapply
?lapply
posts_tasty$start_date = posts_tasty$stats_dt
posts_tasty$end_date = posts_tasty$stats_dt - 1
mapply(metrics_per_day, posts_tasty$start_date, posts_tasty$end_date)
metrics_per_day <- function(start, prev, data){
data$impressions_per_day = data[data$stats_dt == start,]$Total_impressions - data[data$stats_dt == prev,]$Total_impressions
}
mapply(metrics_per_day, posts_tasty$start_date, posts_tasty$end_date, posts_tasty)
View(posts_tasty)
?apply(array, margin, ...)
posts_tasty = merge(posts_tasty, posts_tasty, all.x = 'start_date', all.y = 'end_date')
posts_tasty = merge(posts_tasty, posts_tasty, by.x = 'start_date', by.y = 'end_date')
posts_tasty = as.data.frame(posts_summary %>% filter(display_name == "Tasty"))
View(posts_tasty)
posts_tasty = merge(posts_tasty, posts_tasty, by.x = c('end_date'), by.y = c('start_date'))
posts_tasty$start_date = posts_tasty$stats_dt
posts_tasty$end_date = posts_tasty$stats_dt - 1
posts_tasty = merge(posts_tasty, posts_tasty, by.x = c('end_date'), by.y = c('start_date'))
View(posts_tasty)
View(posts_tasty)
View(posts_tasty)
1287578689 - 1273013909
1297725933 - 1287578689
